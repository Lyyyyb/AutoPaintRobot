#!/usr/bin/env python
PACKAGE = "robot_bringup"
 
from dynamic_reconfigure.parameter_generator_catkin import *
 
 
gen = ParameterGenerator()
 
gen.add("speedparam_x",        int_t, 0, "the param of msg.linear.x",  1000, 1125,  2000)
gen.add("speedparam_y",        int_t, 0, "the param of msg.linear.y",  4000, 4655,  5000)

# gen.add("acc_x",        double_t, 0, "the acc x velocity of vehicle ",  .5, 0,  2)
# gen.add("obtain_name",  str_t,    0, "topic name" , "fff")
# gen.add("acc_y",        double_t, 0,  "the acc y velocity of vehicle", 0.5, 0 , 2)
# gen.add("use_dwa",      bool_t,   0, "whether use dwa or not", True )
# name：参数名，使用字符串描述；
# type：定义参数的类型，可以是int_t, double_t, str_t, 或者bool_t；
# level：需要传入参数动态配置回调函数中的掩码，在回调函数中会修改所有参数的掩码，表示参数已经进行修改；
# description：描述参数作用的字符串；
# default：设置参数的默认值；
# min：可选，设置参数的最小值，对于字符串和布尔类型值不生效；
# max：可选，设置参数的最大值，对于字符串和布尔类型值不生效；
 
# 这种方法可以生成一个参数值，也可以使用如下方法生成一个枚举类型的值：
 
# size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
#                        gen.const("Medium",     int_t, 1, "A medium constant"),
#                        gen.const("Large",      int_t, 2, "A large constant"),
#                        gen.const("ExtraLarge", int_t, 3, "An extra large constant")],
#                      "An enum to set size")
 
# gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)
 
# 最后一个参数是生成的动态参数头文件名字，如这里生成的应是testConfig.h
exit(gen.generate(PACKAGE, "robot_bringup", "speedparam"))
